#!/usr/bin/env python2

import pymysql.cursors
from collections import defaultdict

# init connection to database
db = pymysql.connect(host='localhost',
                     user='sup_rst',
                     password='sup_rst',
                     db='sup_rst',
                     charset='utf8mb4',
                     cursorclass=pymysql.cursors.DictCursor)


# check foreign key exist
def check_foreign_key(table_name, frg_key_name, frg_table):
    # test foreign key(s)
    with db.cursor() as cursor:
        sql = 'SELECT `%s` FROM `%s` WHERE `%s` NOT IN (SELECT id FROM `%s`) AND `%s` != 0' \
              % (frg_key_name, table_name, frg_key_name, frg_table, frg_key_name)
        cursor.execute(sql)
        key_ids = defaultdict(int)
        for item in cursor.fetchall():
            key_ids[item[frg_key_name]] += 1
        for k_id in key_ids:
            print('- found %i records with foreign key \'%s\' %i not exist' % (key_ids[k_id], frg_key_name, k_id))


# check table integrity
def check_table_integrity(table_name):
    with db.cursor() as cursor:
        cursor.execute('CHECK TABLE `%s`' % table_name)
        for msg in cursor.fetchall():
            print('- %s %s' % (msg['Msg_type'], msg['Msg_text']))


# do table check list
def do_table_checks(table_name, frg_key_name=None, frg_table=None):
    # check header
    print('## check \'%s\'' % table_name)
    # check foreign key exist
    if frg_key_name is not None and frg_table is not None:
        check_foreign_key(table_name, frg_key_name, frg_table)
    # check table integrity
    check_table_integrity(table_name)


# check sup_rst tables
print('# check all tables')

# sup_rst.alarms
do_table_checks('alarms', 'id_host', 'hosts')
# sup_rst.hosts
do_table_checks('hosts', 'id_subnet', 'subnets')
# sup_rst.icmp
do_table_checks('icmp', 'id_host', 'hosts')
# sup_rst.icmp_history
do_table_checks('icmp_history', 'id_host', 'hosts')
# sup_rst.icmp_index
do_table_checks('icmp_index', 'id_host', 'hosts')
# sup_rst.icmp_rtt_log
do_table_checks('icmp_rtt_log', 'id_host', 'hosts')
# sup_rst.mbus
do_table_checks('mbus', 'id_host', 'hosts')
# sup_rst.mbus_tables
do_table_checks('mbus_tables', 'id_host', 'hosts')
# sup_rst.mbus_tg
do_table_checks('mbus_tg', 'id_table', 'mbus_tables')
# sup_rst.mbus_tg_log
do_table_checks('mbus_tg_log', 'id_tg', 'mbus_tg')
# sup_rst.mbus_tm
do_table_checks('mbus_tm', 'id_table', 'mbus_tables')
# sup_rst.mbus_tm_log
do_table_checks('mbus_tm_log', 'id_tm', 'mbus_tm')
# sup_rst.mbus_ts
do_table_checks('mbus_ts', 'id_table', 'mbus_tables')
# sup_rst.mbus_ts_log
do_table_checks('mbus_ts_log', 'id_ts', 'mbus_ts')
# sup_rst.mbus_v_grad
do_table_checks('mbus_v_grad', 'id_tm', 'mbus_tm')
# sup_rst.mbus_v_tg
do_table_checks('mbus_v_tg', 'id_tg', 'mbus_tg')
# sup_rst.mbus_v_tm
do_table_checks('mbus_v_tm', 'id_tm', 'mbus_tm')
# sup_rst.mbus_v_ts
do_table_checks('mbus_v_ts', 'id_ts', 'mbus_ts')
# sup_rst.subnets
do_table_checks('subnets')
# sup_rst.variables
do_table_checks('variables')
