#!/usr/bin/env python2

from __future__ import division
from pySupRST import SupRstDB
import math
import schedule
import time

# some consts
# DB
DB_USER = 'srst-db-jobs'
DB_PWD = 'sup_rst'
# misc
PROCESS_NAME = 'db_adm'


# some routines
def safe_eval(eval_str):
    try:
        # clean eval_str
        eval_str = eval_str.replace('\n', ' ').replace('\r', ' ')
        # TODO remove this after syntax compatibility fix
        # perl expr compatibility
        eval_str = eval_str.replace('!', 'not ').replace('?', 'if').replace(':', 'else')
        # remove all python built-in (float, len, callable, eval...)
        glob_ctx = {'__builtins__': None}
        # allow this function only
        loc_ctx = {'abs': abs,
                   'bool': bool, 'int': int, 'float': float,
                   'sqrt': math.sqrt}
        return eval(eval_str, glob_ctx, loc_ctx)
    except(SyntaxError, NameError, ValueError, ZeroDivisionError):
        return None


# call every 30s
def job_every_30s():
    sup = SupRstDB(db_user=DB_USER, db_pwd=DB_PWD, process=PROCESS_NAME)
    try:
        # process virtual TS
        with sup.db.cursor() as cursor:
            cursor.execute('SELECT'
                           ' `mbus_ts`.`tag` AS `tag`,'
                           ' `mbus_v_ts`.`script` AS `script`,'
                           ' `mbus_v_ts`.`id_host` AS `id_host` '
                           'FROM `mbus_ts`, `mbus_v_ts` '
                           'WHERE `mbus_ts`.`id` = `mbus_v_ts`.`id_ts`')
            for db_v_ts in cursor.fetchall():
                s = sup.strip_tags(db_v_ts['script'])
                ts = safe_eval(s)
                sup.set_ts(db_v_ts['tag'], ts, id_host=db_v_ts['id_host'])
        # process virtual TM
        with sup.db.cursor() as cursor:
            cursor.execute('SELECT'
                           ' `mbus_tm`.`tag` AS `tag`,'
                           ' `mbus_v_tm`.`script` AS `script`,'
                           ' `mbus_v_tm`.`id_host` AS `id_host` '
                           'FROM `mbus_tm`, `mbus_v_tm` '
                           'WHERE `mbus_tm`.`id` = `mbus_v_tm`.`id_tm`')
            for db_v_tm in cursor.fetchall():
                s = sup.strip_tags(db_v_tm['script'])
                tm = safe_eval(s)
                sup.set_tm(db_v_tm['tag'], tm, id_host=db_v_tm['id_host'])
        # process virtual TG
        # with sup.db.cursor() as cursor:
        #     cursor.execute('SELECT'
        #                    ' `mbus_tg`.`tag` AS `tag`,'
        #                    ' `mbus_v_tg`.`script` AS `script`,'
        #                    ' `mbus_v_tg`.`id_host` AS `id_host` '
        #                    'FROM `mbus_tg`, `mbus_v_tg` '
        #                    'WHERE `mbus_tg`.`id` = `mbus_v_tg`.`id_tg`')
        #     for db_v_tg in cursor.fetchall():
        #         s = sup.strip_tags(db_v_tg['script'])
        #         tg = safe_eval(s)
        #         if tg is None:
        #             print('script = "%r"' % s)
        #         sup.set_tg(db_v_tg['tag'], tg)
    finally:
        sup.close()


# some routines
def job_every_hours():
    sup = SupRstDB(db_user=DB_USER, db_pwd=DB_PWD, process=PROCESS_NAME)
    try:
        pass
    finally:
        sup.close()


# call at 00h00 every day
def job_midnight():
    sup = SupRstDB(db_user=DB_USER, db_pwd=DB_PWD, process=PROCESS_NAME)
    try:
        with sup.db.cursor() as cursor:
            # store current ICMP index at 00h00
            cursor.execute(
                """
                INSERT
                INTO `icmp_index` (id_host, date_time, up_index, down_index)
                SELECT id_host, NOW(), icmp_up_index, icmp_down_index FROM `icmp`;
                """)

            # purge alarms log
            cursor.execute('DELETE FROM `alarms` WHERE (TO_DAYS(NOW()) - TO_DAYS(`date_time`)) > 365;')

            # purge icmp log (365 for state, 100 days for index, 4 days for rtt)
            cursor.execute('DELETE FROM `icmp_history` WHERE (TO_DAYS(NOW()) - TO_DAYS(`event_date`)) > 365;')
            cursor.execute('DELETE FROM `icmp_index` WHERE (TO_DAYS(NOW()) - TO_DAYS(`date_time`)) > 100;')
            cursor.execute('DELETE FROM `icmp_rtt_log` WHERE (TO_DAYS(NOW()) - TO_DAYS(`rtt_datetime`)) > 4;')

            # purge modbus history (2 years for ts, 365 days for tg, 8 days for tm)
            cursor.execute('DELETE FROM `mbus_ts_log` WHERE (TO_DAYS(NOW()) - TO_DAYS(`update`)) > 2 * 365;')
            cursor.execute('DELETE FROM `mbus_tm_log` WHERE (TO_DAYS(NOW()) - TO_DAYS(`update`)) > 8;')
            cursor.execute('DELETE FROM `mbus_tg_log` WHERE (TO_DAYS(NOW()) - TO_DAYS(`update`)) > 365;')

            # optimize table (MyISAM only)
            cursor.execute(
                """
                OPTIMIZE TABLE `alarms`, `hosts`, `icmp`, `icmp_history`, `icmp_index`,
                `icmp_rtt_log`, `mbus`, `mbus_tables`, `mbus_tg`, `mbus_tg_log`,
                `mbus_tm`, `mbus_tm_log`, `mbus_ts`, `mbus_ts_log`, `mbus_v_grad`, `mbus_v_tg`,
                `mbus_v_tm`, `mbus_v_ts`, `variables`, `subnets`;
                """)
    finally:
        sup.close()


# init schedule
schedule.every(30).seconds.do(job_every_30s)
schedule.every().hour.do(job_every_hours)
schedule.every().day.at('00:00').do(job_midnight)

job_every_30s()

# main loop
while True:
    schedule.run_pending()
    time.sleep(1.0)
