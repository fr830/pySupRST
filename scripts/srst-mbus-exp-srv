#!/usr/bin/env python2

import pymysql.cursors
import time
import datetime
import schedule
from pyModbusTCP.client import ModbusClient

# some consts
# DB
DB_HOST = 'localhost'
DB_USER = 'srst-mbus-exp'
DB_PWD = 'sup_rst'
DB_NAME = 'sup_rst'


# some class
class SupRstDB(object):
    def __init__(self):
        # init connection to database
        self.db_connect = pymysql.connect(host=DB_HOST,
                                          user=DB_USER,
                                          password=DB_PWD,
                                          db=DB_NAME,
                                          charset='utf8mb4',
                                          cursorclass=pymysql.cursors.DictCursor,
                                          autocommit=True)
        self.db_cursor = self.db_connect.cursor()

    def __del__(self):
        self.close()

    def close(self):
        try:
            self.db_cursor.close()
            self.db_connect.close()
        except pymysql.err.Error:
            pass

    def ts(self, tag_name):
        if self.db_cursor.execute('SELECT `ts` FROM `mbus_ts` WHERE `tag` = \'%s\'' % tag_name):
            return self.db_cursor.fetchone()['ts']
        else:
            return 0

    def tm(self, tag_name):
        if self.db_cursor.execute('SELECT `tm` FROM `mbus_tm` WHERE `tag` = \'%s\'' % tag_name):
            return self.db_cursor.fetchone()['tm']
        else:
            return 0


# define jobs
def job_export_avion():
    # DB sup_rst
    sup = SupRstDB()
    # ts
    ts_l1_mel_m = sup.ts('ARLM_L1_M')
    ts_l2_mel_m = sup.ts('ARLM_L2_M')
    ts_mel_m = ts_l1_mel_m or ts_l2_mel_m
    # tm
    l_tm = list()
    l_tm.append(sup.tm('TAIS_A2_PCS'))              # @20536
    l_tm.append(sup.tm('TAIS_A2_WOBBE'))            # @20537
    l_tm.append(sup.tm('BLA_GRO_CO2'))              # @20538
    l_tm.append(sup.tm('TAIS_A2_ANC'))              # @20539
    l_tm.append(sup.tm('ARL_AE2_PCS'))              # @20540
    l_tm.append(sup.tm('ARL_AE2_WBE'))              # @20541
    l_tm.append(sup.tm('ARL_AE2_CO2'))              # @20542
    l_tm.append(sup.tm('Q_ARL_AE'))                 # @20543
    l_tm.append(sup.tm('ARL_AE2_ANC'))              # @20544
    l_tm.append(sup.tm('AVION_PCS'))                # @20545
    l_tm.append(sup.tm('AVION_WBE'))                # @20546
    l_tm.append(sup.tm('AVION_HP_CO2'))             # @20547
    l_tm.append(sup.tm('AVION_ANC'))                # @20548
    l_tm.append(sup.tm('Q_ARL_AO_420'))             # @20549
    # @20550/20553 : select quality source for L1 or 2 (L1 -> from A01/L2 -> from AO2)
    if ts_l1_mel_m:
        l_tm.append(sup.tm('ARL_AO1_PCS'))          # @20550
        l_tm.append(sup.tm('ARLM_WR_L1'))           # @20551
        l_tm.append(sup.tm('ARL_AO1_CO2'))          # @20552
        l_tm.append(sup.tm('ARL_AO1_ANC'))          # @20553
    else:
        l_tm.append(sup.tm('ARL_AO2_PCS'))          # @20550
        l_tm.append(sup.tm('ARLM_WR_L2'))           # @20551
        l_tm.append(sup.tm('ARL_AO2_CO2'))          # @20552
        l_tm.append(sup.tm('ARL_AO2_ANC'))          # @20553
    # add life indicator (srv minute)
    l_tm.append(datetime.datetime.now().minute)     # @20554
    # Q Arleux mel.
    l_tm.append(sup.tm('ARLM_Q'))                   # @20555
    # chromato GNY
    l_tm.append(sup.tm('ARL_GNY_PCS'))              # @20556
    l_tm.append(sup.tm('ARL_GNY_WBE'))              # @20557
    # chromato Flx Blaregnies (! Belgian values 0/25 convert to 0/0)
    l_tm.append(sup.tm('BLA_PCS_GRO_A') * 1.0026)   # @20558
    l_tm.append(sup.tm('BLA_IW_GRO_A') * 1.0026)    # @20559
    # counter GNY Arleux
    l_tm.append(sup.tm('Q_ARL_GNY_S1'))             # @20560
    l_tm.append(sup.tm('Q_ARL_GNY_S2'))             # @20561
    # counter AE1 Arleux
    l_tm.append(sup.tm('Q_ARL_AE1_S1'))             # @20562
    l_tm.append(sup.tm('Q_ARL_AE1_S2'))             # @20563
    # counter AE2 Arleux
    l_tm.append(sup.tm('Q_ARL_AE2_S1'))             # @20564
    l_tm.append(sup.tm('Q_ARL_AE2_S2'))             # @20565
    # IW/PCS AE1 Arleux
    l_tm.append(sup.tm('ARL_AE1_WBE'))              # @20566
    l_tm.append(sup.tm('ARL_AE1_PCS'))              # @20567
    # IW A01 Arleux
    l_tm.append(sup.tm('ARL_AO1_WBE'))              # @20568
    # IW melange for Q enr = 50, 70, 90 et 110 Mm3
    l_tm.append(sup.tm('GZN_IW_MEL_50M'))           # @20569
    l_tm.append(sup.tm('GZN_IW_MEL_70M'))           # @20570
    l_tm.append(sup.tm('GZN_IW_MEL_90M'))           # @20571
    l_tm.append(sup.tm('GZN_IW_MEL_110M'))          # @20572
    sup.close()
    # do modbus write
    c = ModbusClient(host='163.111.181.18', unit_id=1, auto_open=True)
    c.write_single_coil(20486, ts_mel_m)
    c.write_multiple_registers(20536, l_tm)
    c.close()


# init schedule
schedule.every(1).minute.do(job_export_avion)

# first call at startup
job_export_avion()

# main loop
while True:
    schedule.run_pending()
    time.sleep(1.0)
